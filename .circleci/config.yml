version: 2.1
orbs:
  slack: circleci/slack@4.12.1

commands:
  install_awscli:
    description: Install AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install nodejs version 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
             curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
             sudo apt-get install -y nodejs
             
             sudo npm install -g n
             sudo n 13.8.0
            # curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            # sudo apt install -y nodejs   ####REMEMBER THESE TWO COMMENTED LINES ABOVE
                       

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:         
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
      # Add parameter
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm  s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string

      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/Gihzln9tKaS8UmwtTTnRhb/migration <<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
            #  npm audit fix --force ###########################################################################################3CHECK THIS
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:     
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Run for frontend
          command: |
              cd frontend
              npm install
              npm run test              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Run for Backend
          command: |
              cd backend
              npm install
              npm run test
            
  scan-frontend:
    docker:    
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse frontend
          command: |
              cd frontend
              npm install
              # npm audit fix --audit-level=critical --force
              # npm audit fix --audit-level=critical --force
              # npm audit --audit-level=critical
  scan-backend:
    docker:    
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse backend
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force#############################################################################################################################33CHECK THIS
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: | 
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}         
      - run:
          name: Ensure front-end infrastructure exist
          command: |         
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  \
            --output text) >> ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
        
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints:
            - "18:5b:b9:65:0a:09:d0:13:52:d3:9d:6e:98:9e:b9:37"

      - install_awscli #MIGHT REMOVE LATER TEHEHEHE
      - install_ansible
      - attach_workspace:
          at: ~/

#######NEW ADDDITTION BETTANY-AID###### 232-245....UNCOMMENTING OF 256.....ADDITION OF 255 T0 258
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"  

      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:          
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed succesfully." ~/project/backend/migrations_dump.txt
            then
             curl --insecure "https://kvdb.io/S9Qyyd2T7FJLFFfYKvTyJR/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d '1'

            fi

      - destroy-environment
      - revert-migrations
#      # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: | 
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            echo $(cat frontend/.env)
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-frontend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "18:5b:b9:65:0a:09:d0:13:52:d3:9d:6e:98:9e:b9:37"
  #     - attach_workspace:
  #         at: ~/

  #     - install_nodejs
  #     - install_awscli
  #     - install_ansible

  #     - run:
  #         name: Get Backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env

  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           sudo npm install -g npm@6.14.4  #REMOVING THE atlatest tag to see...######################################################################################
  #           rm -rf node_modules
  #           npm install
  #           npm run build
  #           #npm audit fix --force #THIS DOESNT BELONG HERE ITS SAFE TO REMOVE AFTER COMPLETION#########################################################################################3
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment
  #     - revert-migrations
  #     # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints: ['90:c7:a9:21:a3:64:2c:f3:6b:cc:40:dc:dc:e9:54:91']
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            mkdir .circleci/ansible/roles/deploy/files
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            # your code here
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "18:5b:b9:65:0a:09:d0:13:52:d3:9d:6e:98:9e:b9:37"
  #     - attach_workspace:
  #         at: ~/
  #     - install_nodejs
  #     - install_awscli
  #     - install_ansible
  #     - run:
  #         name: Deploy Backend
  #         command: |
  #           cd backend*

  #           npm i
  #           npm run build
  #           #npm audit fix --force #This Switcheroo            
  #           cd ..

  #           cd .circleci/ansible
  #           mkdir files
  #           cd files
  #           tar -C  ../../../backend -czvf artifact.tar.gz . #We are supposed to remember to add ../../ right before the backend
  #           cd ../

  #           echo "Contents of inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml

  #     - destroy-environment
  #     - revert-migrations

#       # Here's where you will add some code to rollback on failure  
########################################################################SMOKE TEST 2#####################I REALLY HOPE THIS THING ISNT PLAYING WITH MY HEART
  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text)
            echo "${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030"            
      - run:
          name: Backend smoke test.
          command: |
            if [[ 'ok' =~ $(curl -s --connect-timeout 5 http://${BACKEND_IP}:3030/api/status | grep -o ok) ]];then return 0 else return 1;fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
  # smoke-test:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout

  #     - install_nodejs
  #     - install_awscli
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
  #           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
  #           echo ${BACKEND_PUBLIC_IP}
  #           echo backend-${CIRCLE_WORKFLOW_ID:0:7}
  #           echo ${API_URL}
  #           if curl -s $API_URL/api/status | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test
  #         command: |
  #           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
  #           echo $FRONTEND_WEBSITE
  #           if curl -s $FRONTEND_WEBSITE | grep "Welcome"
  #           then
  #             exit 0 #exit 1 & 0
  #           else
  #             exit 1
  #           fi
  #     - destroy-environment
  #     - revert-migrations

            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout 
      - run:
          name: Install dep / Save old workload ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/S9Qyyd2T7FJLFFfYKvTyJR/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update Cloudfront Distributions
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name InitialStack
            # your code here
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch] #we can just edit it and just run on master 

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

######IN TRANSITION############################################################################################################################################


# version: 2.1

# orbs:
#   slack: circleci/slack@4.12.1



# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id:
#         type: string   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-backend-<< parameters.workflow_id >>"
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id:
#         type: string     
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl --insecure  https://kvdb.io/S9Qyyd2T7FJLFFfYKvTyJR/migration_<< parameters.workflow_id >>)
#             if(( $SUCCESS==1 )); 
#             then
#              cd ~/project/backend
#              npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#              npm run migration:revert
#             fi

#   dependencies:
#     steps:
#       - run:
#           name: Installing necessary packages
#           command: |
#             sudo apt update
#             sudo apt install -y tar gzip curl software-properties-common
#       - run:
#           name: Installing aws-cli
#           command: |
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Installing ansible
#           command: |
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build
#       - slack/notify:
#           event: fail
#           template: basics_fail_1

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              cd backend
#              npm install
#              npm run build 
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build
#       - slack/notify:
#           event: fail
#           template: basics_fail_1
#   test-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout 
#       - restore_cache:
#           keys:
#             - build-frontend
#       - run:
#           name: Testing frontend
#           command: |
#             cd frontend
#             npm install
#             npm run test
#       - slack/notify:
#           event: fail
#           template: basics_fail_1
                
#   test-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-backend
#       - run:
#           name: Testing backend
#           command: |
#             cd backend
#             npm install
#             npm run test
#       - slack/notify:
#           event: fail
#           template: basics_fail_1

#   scan-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend

#       - run:
#           name: scan frontend
#           command: |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force
#       - slack/notify:
#           event: fail
#           template: basics_fail_1

#   scan-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend

#       - run:
#           name: scan frontend
#           command: |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force
#       - slack/notify:
#           event: fail
#           template: basics_fail_1
#           ####TAKE A PAUSE FIRST AND LETS SEEEEE#####################################################################################################################################

#   # deploy-infrastructure:
#   #   docker:
#   #     - image: amazon/aws-cli
#   #   steps:
#   #     - checkout
#   #     - run: yum install -y tar gzip
#   #     - run:
#   #         name: Ensure back-end infrastructure exists
#   #         command: | 
#   #             aws cloudformation deploy \
#   #             --template-file .circleci/files/backend.yml \
#   #             --tags project=udapeople \
#   #             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#   #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}         
#   #     - run:
#   #         name: Ensure front-end infrastructure exist
#   #         command: |         
#   #           aws cloudformation deploy \
#   #             --template-file .circleci/files/frontend.yml \
#   #             --tags project=udapeople \
#   #             --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
#   #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
#   #     - run:
#   #         name: Add back-end ip to ansible inventory
#   #         command: |
#   #           echo $(aws ec2 describe-instances \
#   #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
#   #           --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  \
#   #           --output text) >> ~/project/.circleci/ansible/inventory.txt

#   #     - persist_to_workspace:
#   #         root: ~/
#   #         paths:
#   #           - project/.circleci/ansible/inventory.txt
#   #     - destroy-environment:
#   #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install tar utility
#           command: |
#             yum install -y tar gzip
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --tags project=udapeople \
#               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#               ######REMEMBER THISSSSSSSSSSSSSSS NThE9CNW5wyj44nnkLyMTJi
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --output text)
#             echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
#             cat .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 

#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["18:5b:b9:65:0a:09:d0:13:52:d3:9d:6e:98:9e:b9:37"]
      
#       - run:
#           name: Install dependencies
#           command: |
#             apk add curl
#             apk add --upgrade bash
#             apk add --update ansible
#             apk add openssh-client
#             pip3 install awscli
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Configure server
#           command: |
#             # add environnement variables to server
#             echo ENVIRONMENT=production > backend/.env
#             echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
#             echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
#             echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
#             echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
#             echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
#             cat backend/.env
#             cat ~/project/.circleci/ansible/inventory.txt
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml 
      
#       - persist_to_workspace:
#           root: ~/
#           paths: 
#             - project/backend
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 

#   run-migrations:
#     docker:
#       - image: sleavely/node-awscli:14.x
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install 
#             npm run build
#             npm run migrations > migrations_dump.txt
#             cat migrations_dump.txt
#       - run:
#           name: Sending migration status to kvdb
#           command: |
#             if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
#             then
#               curl  https://kvdb.io/S9Qyyd2T7FJLFFfYKvTyJR/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' --insecure
#             fi
#      # Here's where you will add some code to rollback on failure
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  
#   deploy-frontend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend
#       - run:
#           name: install dependencies
#           command: |
#             sudo apt update
#             sudo apt install -y tar gzip curl software-properties-common
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Get backend url
#           command: |
#              export BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
#              export API_URL="http://${BACKEND_IP}:3030"
#              echo "API_URL=${API_URL}" 
#              echo "API_URL=${API_URL}" >> frontend/.env
#              cat frontend/.env
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Deploy frontend objects
#           working_directory: ./frontend
#           command: |
#             npm i
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'


#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#         environment:
#           NODE_ENV: "production"
#           VERSION: "1"
#           ENVIRONMENT: "production"
#           TYPEORM_CONNECTION: $TYPEORM_CONNECTION
#           TYPEORM_HOST: $TYPEORM_HOST
#           TYPEORM_USERNAME: $TYPEORM_USERNAME
#           TYPEORM_PASSWORD: $TYPEORM_PASSWORD
#           TYPEORM_DATABASE: $TYPEORM_DATABASE
#           TYPEORM_PORT: $TYPEORM_PORT
#           TYPEORM_ENTITIES: $TYPEORM_ENTITIES       
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["18:5b:b9:65:0a:09:d0:13:52:d3:9d:6e:98:9e:b9:37"]
      
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update  ansible nodejs npm tar gzip
#       - restore_cache:
#           keys:
#             - build-backend
#       - attach_workspace: 
#           at: ~/
#       - run:
#           name: Deploy backend
#           command: |
#             cd backend
#             npm install -g typescript
#             npm install
#             npm run build
#             cd ..
#             tar -C backend -czvf artifact.tar.gz .
#             mkdir -p /root/project/.circleci/ansible/roles/deploy/files/
#             mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
#             cd .circleci/ansible/
#             echo "content of inventory file"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

    
#   smoke-test:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             pip install awscli
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo "${BACKEND_IP}"
#             if curl -s "${API_URL}/api/status" | grep "ok"
#             then
#                 exit 0
#             else
#                 exit 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"             
#             echo ${URL} 
#             if curl -s ${URL} | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi 
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install -y tar gzip
#       - run:
#           name: Store old WorkflowID in kvdb.io for cleanup phase
#           working_directory: ./.circleci/files
#           command: |
#             oldWorkflowID=$(aws cloudformation \
#               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#               --no-paginate --output text)
#             echo "Old Wokflow ID: $oldWorkflowID"
#             curl -d "$oldWorkflowID" https://kvdb.io/S9Qyyd2T7FJLFFfYKvTyJR/oldWorkflowid 
#       - run:
#           name: Update cloudfront 
#           working_directory: ./.circleci/files
#           command: |
#             aws cloudformation deploy \
#               --template-file cloudfront.yml \
#               --stack-name udapeople-cloudfront \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#   cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Clean up old environment
#           command: |
#             OldWorkflowID=$(curl --insecure https://kvdb.io/S9Qyyd2T7FJLFFfYKvTyJR/oldWorkflowid)
#             CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo " "
#             echo CurrentWorkflowID: "${CurrentWorkflowID}"
#             echo " "
#             if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
#             then
#               echo "*** $OldWorkflowID != $CurrentWorkflowID => old version will be deleted."
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#             else
#               echo "$OldWorkflowID == $CurrentWorkflowID => *** nothing to do ..."
#             fi    


# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - scan-backend:
#           requires: [build-backend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           # filters:
#           #   branches:
#           #     only: [main]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       # - cloudfront-update:
#       #     requires: [smoke-test]
#       # - cleanup:
#       #     requires: [cloudfront-update]